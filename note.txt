**********************************************
**********Wrdpress********************
***********************************


**************************
Instalation de WP
***********************

On installe WP dans un dossier /eprojet/ dans XAMPP.
	Nom de la BDD : eprojet
	Titre du site : Mes petites annonces

Etapes d'installation :
1-Télécharger WP sur https://fr.wordpress.org/
2-Dézipper l'archive et mettre le dossier sur XAMPP ou WAMP
3-Dans PHPMyAdmin : créer une BDD (vide)
4-Lancer le site via localhost dans le navigateur et remplir les formulaires
	-Nom de la BDD
	-Identifiant de la BDD
	-Mot de passe de la BDD
	-Adresse de la BDD : localhost pour nous

	-Titre du site 
	-Identifiant et le moot de passe d'aministration

5- WP s'installe... puis on se connecte au back-office avec les identifiants indiqués précédemment.

URL d'accès au back-office par defaut :  https://monsite.com/wp-admin/


**************************
Créer un thème enfant
**************************

-Les AVANTAGES d'un thème enfant :
Grâce aux thème enfants, vous pouvez modifier un thème existant en conservant le bénéfice des mises à jour du thème parent (exemples :nouvelles fonctionnalités, mises à jour de sécurité ...)

Un thème enfant vous permet de modifier les STYLES et les FICHIERS TEMPLARES d'un thème existant parent, ainsi que d'ajouter des FONCTIONNALITES.

-CREER un thème enfant :
1-Pour créer un thème enfant du thème "twentyseventeen", on crée un dossier "twentyseventeen-child" dans le dossier /wp_content/themes. On nomme le dossier enfant ainsi comme le veut la bonne pratique.
2- Y créer un fichier style.css (sans S) et y mettre le code suivant :
	/*
	Theme: twentyseventeen-child
	Template: twentyseventeen
	*/
	
	@import url("../twentyseventeen/style.css");

Attention : ne pas séparer les ":" des étiquettes Theme Name et Template ci-dessus par espace !

le code CSS du thème enfant ECRASE le code CSS parent, car il est exécuté APRES celui du parent

3-ACTIVER le thème enfant dans le back-office. Puis vous pouvez le modifier.

4- Modifier un fichier template :
	Pour cela, il suffit de copier le fichier parent que l'on veut modifier dans le dossier du thème enfant.

	Exemple :
	Copier le fichier footer.php du thème parent et le copier dans le thème enfant.
	Puis modifier sa structure HTML conformément à la maquette du client.

	Le fichier template enfant REMPLACE celui du thème parent.

5-Le fichier functions.php :
	Ce fichier fonctionne différement : il n'écrase pas le fichier du parent, mais il est chargé AVANT celui du parent. Ainsi, les fonctions enfants s'ajoutent à celles du parent. Nous verrons ce fichier functions.php plus tard dans le cours.

**********************************
La hiérarchie des template de WP
**********************************

//Installer l'extension SHOW CURRENT TEMPLATE de Jotaki Taisuke.

// La hiérarchie WP :
Exemple avec la page d'accueil : si le fichier template front-page.php existe, WP l'utilise pour afficher la page. S'il n'existe pas, WP continue son "chemin" et prend le fichier suivant home.php. S'il n'existe pas non plus, WP continue son "chemin" et prend par défaut le fichier index.php.

// Descriptiondes fichiers templates de la hiérarchie :
Un template est un modèle de page. S'il ya 100 pages sur votre site, il n'ya pas 100 fichiers (comme pour les sites statiques) : les contenu sont enregistés dans la BDD, et seulement quelques fichiers appelés template affichent le contenu dynamiquement (= automatiquement).

index.php : fichier principal du site qui est utilisé si aucun des autres templates demandés n'existent (template par défaut).

archive.php : affiche la liste des articles quand les fichiers spécifiques n'existent pas (author.php, category.php, tag.php ou date.php => cf hiérarchie)

single.php : affiche un seul article créé dans le back-office

page.php : affiche une page créée dans le back-office

home.php : affichage de la page d'accueil prioritaire sur index.php si le fichier home.php existe

comments.php : affichage des commentaires

404.php : affiche la page de contenu non trouvé

serch.php : affiche les résultats d'une recherche

------------------

function.php : fichier d'inclusion contenant les fonctions du thème

header.php : fichier d'inclusion du haut du site (systématiquement inclus dans les templates du site)

footer.php : fichier d'inclusion du bas du site (systématiquement inclus dans les templates du site)

sidebar.php : fichier d'inclusion de la bar latérale contenant des widgets (ou autres chose) qui est inclus dans les templates du site

-------------------

//Template spécifiques :
On peut dans WP faire des templates particuliers sur la base des fichiers template d'origine vus ci-dessus, en leur ajoutant un id ou un slug dans le nom du fichier.

"slug" signifie en anglais "identifiant" :il représente un élément de contenu, article ou page. Exemple : 
l'article "Seul sur mars" aura pour slug "seul-sur-mars" et pour url https://monsite.com/seul-sur-mars.

-Page spécifique dans l'ordre de priorité:
	-page-$slug.php (exemple : page-contact.php)
	-page-$id.php   (exemple : page-3.php)
	-page.php
	-index.php

-Catégorie spécifique dans l'ordre de priorité :
	-category-$slug.php (exemple : category-auto.php)
	-category-$id.php (exemple : category-105.php)
	-category.php
	-archive.php
	-index.php


***********************************
Développement d'un thème complet
**********************************

Les grande étapes seront :
	01. Création du thème graphique et des ses templates
	02.Initialisation des zones de widgets
	03.Initialisation des zones de menus
	04. Création du menu principal avec des catégories et d'une front page
	05. Création d'un type de contenu "annonces" avec des champs personnalisés 5CPT UI et ACF°
	06. Création des templates spécifiques : single-annonce.php et category-blog-auto.php
	07. Création du template spécifique : category.php
	08. Afficher la dernière annonce parue

*********************************************************
01. Création du thème graphique et des ses templates
*********************************************************

//Créer undossier au nom du thème "eprojet" dans :

	wp-content/themes

Nous allos y mettre tous nos fichiers du thème.

// Création du screenshot du site :
Il s'agit du fichier qui s'appelle screenshot.png. Il représente le thème dans le back-office.

// Création de la feuile de style : style.css
Le fichier style.css contien en commentaire toutes les infos affichées dans le back-office > apparence > thèmes.

On y met le code suivant :

/*
Theme Name: eprojet
Author: moi
Description: Thème du site de petites annonces de véhicules d'occasion.
Version: 1.0
*/

// Création d'un sous-dossier : /assets/

On y met les ressources nécessaires au site (img, CSS, JS, etc.)

// Création du fichier d'inclusion header.php :
Pour le code, voir le fichier correspondant.

// Création d'un fichier d'inclusion footer.php
Pour le code, voir le fichier correspondant.


// On crée les fichiers templates suivants :
	index.php
	page.php
	single.php
	front-page.php
	category.php

=> dans category.php : on a écrit "fichier vide pour l'instant"

=> dans les 4 autres fichiers, on a mis le code suivant :


<?php 
    get_header();// inclusion de header.php
?>

<?php
    if (have_posts()) : 
        while (have_posts()) : the_post();
?>

        <h2 class = "col-lg-12"><a href="<?php the_permalink() ;?>"><?php the_title(); ?></a></h2>

        <div class="col-lg-12"><?php the_content() ;?></div>

<?php
        endwhile;
        else :
            echo '<p> Aucun contenu ne correspond à votre demande...</p>';
        endif;
?>

<?php
	get_footer();
?>


-----------------------------------------------------------------

// La boucle de WP et le code des templates :

Dans les templates de WP, nous mettrons TOUJOURS une boucle, même s'il y a qu'un seul contenu à afficher.

On inscrit donc le code ci-dessus au minimum dans tous les templates.

-have_post() : retourne un booléen pour savoir s'il rest des objets à afficher sur la page en cours.
Par exemple, si l'on cherche à afficher les articles (ou les annonces, ou produits....) récupérés de la BDD n'auront pas été affichés.

-the post() : à l'intérieur de la boucle while, la fonction the_post() récupère les données d'un post (= article ou page).
 Puis un curseur interne à WP sélectionne le post suivant. Lorsque le curseur arrive au dernier post, alors la méthode have_posts() renvoie false et la boucle while s'arrête.

-the_content() : affiche le contenu du post

-the_title() : affiche son titre

-the_permalink () : affiche son lien (url)

-the_excert() : affiche l'extrait du post

-the_field() : affiche un champ personnalisé

the_ID() : affiche l'id du post

--------------
le reste du code :
-get_header() et get_footer() : permet d'inclure header.php et footer.php

-get_sidebar() : permet d'inclure le fichier appelé sidebar.php qui est la zone lattérale contenant les widgets

-get_template_part('content','monFichier') : permet d'inclure le fichier appelé content_monFichier.php.
Ces inclusions représentent des "sous parties" de template.

******************************************
02.Initialisation des zones de widgets
******************************************
	1° On déclare la zone de widgets dans function.php avec la fonction register_sidebar()
	2° On place la zone de widgets dans le template qui nous intéresse avec la fonction dynamic_sidebar()
	3° Dans le back_office, on n'oublie pas de placer un widget à l'intérieur de la zone pour la voir.

// Création du fichier function.php :

Pour  déclarer notre zone de widgets on y met le code suivant :

<?php

// Création des zones de widgets :

function eprojet_init_sidebar(){// notre fonction qui contient la déclaration des zones de widgets
    register_sidebar(array(
        'name'=>'région entête', // nom qui apparaît dans le BO (back-office)
        'id'  => 'region-entete', // identifiant unique de la zone pour pouvoir l'appelr dans un template
        'description' => 'Cette zone de widget est en entête de la page d\'accueil'// description qui apparaît dans le BO
    ));
   register_sidebar(array(
        'name'=>'colonne de droite', // nom qui apparaît dans le BO (back-office)
        'id'  => 'colonne-droite', // identifiant unique de la zone pour pouvoir l'appelr dans un template
        'description' => 'Cette zone de widget est dans la barre latérale de droite'// description qui apparaît dans le BO
   ));
}

add_action('widgets_init', 'eprojet_init_sidebar' );// j'exécute ma fonction nommée "eprojet_init_sidebar" lors de l'initiation des widgets effectuée par WP : notre fonction est accrochée à celle du coeur de WP (hook)


// Création d'un fichier sidebar-droite.php pour contenir la barre latérale de droite avec sa zone de widgets à l'intérieur :

Ce fichier sera utilisé un peu plus tard dans le template single-annonce.php

On y met le code suivant :

	<div id="region-droite">
   		<?php
      		  dynamic-sidebar('colonne-droite'); // on appelle la zone de widgets créée dans functions.php dont l'id est "colonne-droite"
   		?>
	</div>

// On insère la zone widgets "région entête" dans le template appelé header.php

On y met le code suivant :

   <?php 
        if(is_front_page()) :// si on est sur la page d'accueil, on affiche l'entête avec sa zone de widgets
    ?>
    <div id="entete" class="align-items-center">

        <div class="container">
            <?php
                dynamic_sidebar('region_entete');// Appelle la zone de widget d'id "region-entete" déclarée dans function.php
            ?>
        </div>
    
    </div>

    <?php
        endif;
    ?>

*************
Exercice :
*************
Mettre une zone de wigets dans le footer de gauche, avec un widget texte "ici on peut mettre un widget" à l'intérieur.

******************************************
03.Initialisation des zones de menus
******************************************

On va créer le menu principal du site.

Pour  créer une zone de menu :
	1° on déclare la zone de menu dans functions.php avec la fonction register_nav_menu()
	2° on place la zone de menu dans le template qui nous intéresse avec la fonction wp_nav_menu()
	3° dans le back-office, on place un menu à l'intérieur de la zone.

// Déclaration de la zone de menu dans function.php
On y met le code suivant :

	function eprojet_init_menu(){
	    register_nav_menu('primary', 'menu principal');// on déclare une zone de menu d'id "primary" et de nom "menu principal" dans le back-office
	}

add_action ('intit', 'eprojet_init_menu'); // WP exécute notre fonction eprojet_init_menu lors de son initialisation (= 'init')

// 2° on place la zone de menu dans le template header.php

On y met le code suivant :

	     <?php 
                     wp_nav_menu(array( // cette fonction permet d'appeler le menu que nous avons déclaré dans functions.php
                    'theme_location' => 'primary', //correspond à l'id du menu déclaré dans functions.php
                    'menu_class'     => 'navbar-nav' // pour ajouter une classe CSS à notre menu
                            	));
                        
              ?>

//On crée le menu principal dans le back-office auquel on ajoute une page "contact" :

	Dans apparence > Menus > Nom de menu > saisir "mon menu principal" puis cliquer sur "Créer le menu"

	Ensuite, on affecte ce menu à l'emplacement appelé "menu principal" créé dans functions.php : on clique sur la case à cocher "menu principal".

Enfin, on ajoute la ou les pages souhaitées à ce menu.

************
Exercice
***********

Créer une zone de menu dans le footer de droite, et y mettre un lien de menus vers une page "mentions légales" que vous créez dans le back-office.

**********************************************************************
04. Création du menu principal avec des catégories et d'une front page
**********************************************************************

// On créer des catégories pour les annonces, et les ajouter au menu principal :

Les catégories seron les suivantes :

	-Occasion
		--Voiteurs
		--Utilitaires
		--Deux roues

	-Blog auto


//---------------------------------------------------
// On crée une page d'accueil spécifique :

*****************
Exercice
***************

Créer dans le back-office une page "home" avec du lorem ipsum. Puis vous la paramétrez comme page d'accueil du site 
(on doit arriver à elle quand on clique sur "Mes petites annonces"). Enfin, vous ajoutez cette page au menu principal.

**********************************************************************************************
05. Création d'un type de contenu "annonces" avec des champs personnalisés 5CPT UI et ACF°
*********************************************************************************************

//Création d'un type de contenu "annonces" :
Le nouveau type "annonce" que l'on va créer s'appelle dans le langage WP un CUSTOM POST TYPE (type de contenu customisé).

Problématique : en l'état initial de WP, on ne peut que créer des pages ou des articles. Nous avons donc besoin de créer un CPI personnalisé pour faire des annonces

Pour cela, on utilise un pluging appelé "CUSTOM POST TYPE UI" par WebDevStudios.

	Dans CPT UI > Add/Edit Posts Types > puis on remplit le formulaire :
		Post Type Slug* : annonce  (on respecte la charte de nommage des identifiants)
		Plural label*   : Annonces (étiquette au pluriel)
		Singuler label* : Annonce (étiquette au singulier)

		Puis dans le bloc "Sittings", on a coché "Catégories (wp Core)" qui est tout en bas .... Ce réglage permet d'utiliser nos catégories créées précédement sur nos annonces.

		Enfin faite "Add post type" pour enregistrer.


//-----------------------------------
// Création des champs personnalisés pour le CPT "annonces" :

Pour cela on utilise un plugin appelé "ADVANCED CUSTOM FIELDS" par Elliot Condon (ACF)

	Dans le menu ACF > bouton "Ajouter" > on met pour titre "champs pour annonces"

	Puis on crée les 6 champs:
	1. Titre du champ : photo
	Nom du champ      : photo ( =identifiant)
	Type de champ     : image
	Requis            : oui      
	Valeur affichée dans le template : URL de l'image

	2. Titre du champ : marque
	Nom du champ      : marque ( =identifiant)
	Type de champ     : texte
	Requis            : oui    

	3. Titre du champ : modele
	Nom du champ      : modele ( =identifiant)
	Type de champ     : texte
	Requis            : oui   

	4. Titre du champ : km
	Nom du champ      : km ( =identifiant)
	Type de champ     : nombre
	Requis            : oui   

	5. Titre du champ : carburant
	Nom du champ      : carburant ( =identifiant)
	Type de champ     : Liste de choix
	Requis            : oui   
	choix             : Essence	
			  :Diesel
			  :Hybride
			  :Electrique

	6. Titre du champ : prix
	Nom du champ      : prix ( =identifiant)
	Type de champ     : nombre
	Requis            : oui   

	Enfin, dans "Assigner ce groupe de champs" > Montrer ce champ quand "Type de publication" > "est égale à" "annonce".
	
	Ce dernier paramétrage  permet d'afficher ces nouveaux champs au CPT "annoces" au lieu de post par défaut.

	N'oubliez pas de publier  !:

// Créer 2 annonces : FIAT 500 et Renault Mégane dans la catégorie "Voitures".

**********
Exercice
**********

Créer un custom post type "pro" pour afficher les professionnels qui proposent leurs services. Puis vous ajoutez aux champs titre et contenu déjà présent dans 
ce CPT "pro", les champs "code postal", "ville" et "téléphone" (type texte). Enfin vous créez un ou deux professionnels et vous les ajoutez au menu principal 
pour les afficher (pour l'instant on ne voit que le title et le content).


**************************************************************************************
06. Création des templates spécifiques : single-annonce.php et category-blog-auto.php
**************************************************************************************

// Template spécifique pour les annoces :

En front avec le plugin SHOW CURRENT TEMPLATE on voit que l'on est dans le modèle single.php quand on clique sur une annonce.

Puis on se réfère à la hiérarchie  de WP pour déterminer le fichier à créer : nous voyons à gauche de single.php que l'on peut créer 
un fichier single_$posttype.php (en orange). $posttype correspond précisément au slug du CPT "Annonces". On peut le vérifier dans le menu CPT UI > Edit post type > choisir "Annonces".
Notre slug étant écrit "annonce", notre fichier s'écrira singel_annonce.php

Pour afficher les champs personnalisés du CPT "Annonces", on met la fonction the_field('slug_du_champ') dans le template d'affichage single-annonce.php.

// Template spécifique pour les articles du blog auto

En front avec SHOW CURRENT TEMPLATE on voit que l'on est dans category.php quand on clique sur Blog Auto.

D'après la hiérarchie, je peux créer un template personnalisé category-$slug.php. $slug est le slug de la catégorie Blog Auto, soit "Blog Auto" : on crée donc un fichier appelé category-blog-auto.php



****************************************************
07. Création du template spécifique : category.php
****************************************************

Nous allons customiser la page catégoriy.php pour afficher la liste des annonces en fonction de la catégorie choisie dans le menu de navigatation

Quand on clique sur une catégorie d'annoces, par défaut WP sélectionne les ARTICLES de cette catégorie.
Nous, nous voulons les posts de type ANNONCE (et non pas article), mais WP ne connait pas ce type car c'est nous qui l'avons créé ! 
Il nous faut donc faire notre propre requête en BDD pour sélectionner les posts de type ANNONCE avant de les afficher.

Pour le code, voir le fichier category.php



***************************************
08. Afficher la dernière annonce parue
***************************************

Nous allos créer une alert qui affiche la dérnière annonce parue dans la barre latérale de droite (fichier sidebar_droite.php).

Por le code, voir le fichier sidebar_droite.php .


************
EXERCICES :
************

Compléments avant exercices :
- On crée un template de base archive.php en copiant page.php (ainsi on aura tous les templates de bases dans notre thème)

-pour pouvoir afficher "Tous les Professionnels" dans le menu : on va dans CPT UI  > bloc Settings > champ Has Archive que l'on met à TRUE. 
Cela permet de générer des archives (= liste des "pro") dans le template archive.php.

Puis on va dans Apparence > Menus > et on ajoute à notre menu le lien "All professionnels" que l'on renomme "Tous les Professionnels"

--------------------------
Exercice :
	-Quand on clique  sur lien de menu "Tous les Professionnels", on affiche un template spécifique qui affiche la liste des pros avec les infos : titre, code postal et ville.


Exercice Quand on clique sur un professionnel de la liste, on affiche la page détaillée de celui-ci : créer cette page qui indique son nom, sa description, son code postal, sa ville et son téléphone.
 de plus, vous mettez à droite de cette page la barre latérale qui contien la dernière annonces de véhicule.

Ajout sous le page détaillée du professionnel un lien "retour vers la liste des professionnels".


----------------------

Exercice :
Ajouter en bas de la page d'accueil dans 2 blocs côte-àcôte sous le contenu :

	- dans le bloc de gauche : la dernière annonce parue (photo cliquable, titre, prix)
	- dans le bloc droite : les trois derniers professionnels inscrits (nom cliquable, code postal, ville).

------------------------
Exercice :

	-créer un theme enfant. Puis vous faite un template personnalisé de la page contact créée deans le back-office : on y met la barre latérale de droite à GAUCHE

